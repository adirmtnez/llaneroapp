-- =====================================================
-- CONFIGURACI√ìN SUPABASE REALTIME PARA PEDIDOS
-- Actualizado seg√∫n estado actual de la base de datos
-- =====================================================

-- ‚úÖ ESTADO ACTUAL (Ya configurado):
-- - orders: REALTIME ENABLED ‚úÖ
-- - order_item: REALTIME ENABLED ‚úÖ  
-- - order_payments: REALTIME ENABLED ‚úÖ
-- - order_tracking: REALTIME ENABLED ‚úÖ

-- =====================================================
-- PASO 1: VERIFICAR CONFIGURACI√ìN ACTUAL
-- =====================================================

-- Verificar tablas con Realtime habilitado
SELECT 
  schemaname,
  tablename,
  'REALTIME ENABLED' as status
FROM pg_publication_tables 
WHERE pubname = 'supabase_realtime'
AND tablename IN ('orders', 'order_item', 'order_payments', 'order_tracking')
ORDER BY tablename;

-- Verificar pol√≠ticas RLS existentes
SELECT 
  tablename,
  policyname,
  cmd,
  permissive
FROM pg_policies 
WHERE tablename IN ('orders', 'order_item', 'order_payments', 'order_tracking')
ORDER BY tablename, policyname;

-- =====================================================
-- PASO 2: CONFIGURAR POL√çTICAS RLS (EJECUTAR ESTO)
-- =====================================================

-- Habilitar RLS en todas las tablas relacionadas a pedidos
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_item ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_tracking ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para usuarios - solo pueden ver sus propios pedidos
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'orders' 
    AND policyname = 'Users can view own orders realtime'
  ) THEN
    CREATE POLICY "Users can view own orders realtime" ON orders
      FOR SELECT 
      USING (customer_id = auth.uid());
    RAISE NOTICE 'Pol√≠tica creada: Users can view own orders realtime';
  ELSE
    RAISE NOTICE 'Pol√≠tica ya existe: Users can view own orders realtime';
  END IF;
END $$;

-- Pol√≠tica para order_items - solo items de pedidos del usuario
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'order_item' 
    AND policyname = 'Users can view own order items realtime'
  ) THEN
    CREATE POLICY "Users can view own order items realtime" ON order_item
      FOR SELECT 
      USING (
        EXISTS (
          SELECT 1 FROM orders 
          WHERE orders.id = order_item.order_id 
          AND orders.customer_id = auth.uid()
        )
      );
    RAISE NOTICE 'Pol√≠tica creada: Users can view own order items realtime';
  ELSE
    RAISE NOTICE 'Pol√≠tica ya existe: Users can view own order items realtime';
  END IF;
END $$;

-- Pol√≠tica para order_payments - solo pagos de pedidos del usuario
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'order_payments' 
    AND policyname = 'Users can view own order payments realtime'
  ) THEN
    CREATE POLICY "Users can view own order payments realtime" ON order_payments
      FOR SELECT 
      USING (
        EXISTS (
          SELECT 1 FROM orders 
          WHERE orders.id = order_payments.order_id 
          AND orders.customer_id = auth.uid()
        )
      );
    RAISE NOTICE 'Pol√≠tica creada: Users can view own order payments realtime';
  ELSE
    RAISE NOTICE 'Pol√≠tica ya existe: Users can view own order payments realtime';
  END IF;
END $$;

-- Pol√≠tica para order_tracking - solo tracking de pedidos del usuario
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'order_tracking' 
    AND policyname = 'Users can view own order tracking realtime'
  ) THEN
    CREATE POLICY "Users can view own order tracking realtime" ON order_tracking
      FOR SELECT 
      USING (
        EXISTS (
          SELECT 1 FROM orders 
          WHERE orders.id = order_tracking.order_id 
          AND orders.customer_id = auth.uid()
        )
      );
    RAISE NOTICE 'Pol√≠tica creada: Users can view own order tracking realtime';
  ELSE
    RAISE NOTICE 'Pol√≠tica ya existe: Users can view own order tracking realtime';
  END IF;
END $$;

-- =====================================================
-- PASO 3: POL√çTICAS PARA TABLA USERS (REQUERIDO PARA ADMIN)
-- =====================================================

-- Habilitar RLS en tabla users
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para usuarios - pueden ver su propio perfil
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'users' 
    AND policyname = 'Users can view own profile'
  ) THEN
    CREATE POLICY "Users can view own profile" ON users
      FOR SELECT 
      USING (id = auth.uid());
    RAISE NOTICE 'Pol√≠tica creada: Users can view own profile';
  ELSE
    RAISE NOTICE 'Pol√≠tica ya existe: Users can view own profile';
  END IF;
END $$;

-- üîë POL√çTICA CR√çTICA: Admin/Manager puede leer info b√°sica de usuarios (para pedidos)
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'users' 
    AND policyname = 'Admin can view user basic info'
  ) THEN
    CREATE POLICY "Admin can view user basic info" ON users
      FOR SELECT 
      USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE users.id = auth.uid() 
          AND users.role IN (1, 2)  -- ‚úÖ Admin (role=1) y Manager (role=2)
        )
      );
    RAISE NOTICE 'Pol√≠tica creada: Admin/Manager can view user basic info (role 1,2)';
  ELSE
    RAISE NOTICE 'Pol√≠tica ya existe: Admin can view user basic info';
  END IF;
END $$;

-- =====================================================
-- PASO 4 (OPCIONAL): POL√çTICAS PARA ADMINISTRADORES EN ORDERS
-- =====================================================

-- Pol√≠tica para administradores y managers - pueden ver todos los pedidos
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'orders' 
    AND policyname = 'Admins can view all orders realtime'
  ) THEN
    CREATE POLICY "Admins can view all orders realtime" ON orders
      FOR SELECT 
      USING (
        EXISTS (
          SELECT 1 FROM users 
          WHERE users.id = auth.uid() 
          AND users.role IN (1, 2)  -- ‚úÖ Admin (role=1) y Manager (role=2)
        )
      );
    RAISE NOTICE 'Pol√≠tica de admin/manager creada para orders (role 1,2)';
  ELSE
    RAISE NOTICE 'Pol√≠tica de admin ya existe para orders';
  END IF;
END $$;

-- =====================================================
-- CONFIGURACI√ìN ADICIONAL (OPCIONAL)
-- =====================================================

-- Habilitar Realtime para otras tablas relacionadas si es necesario
-- ALTER PUBLICATION supabase_realtime ADD TABLE bodegons;
-- ALTER PUBLICATION supabase_realtime ADD TABLE bodegon_products;
-- ALTER PUBLICATION supabase_realtime ADD TABLE customer_addresses;

-- =====================================================
-- PASO 4: VERIFICAR CONFIGURACI√ìN FINAL
-- =====================================================

-- Verificar todas las tablas con Realtime habilitado
SELECT 
  schemaname,
  tablename,
  'REALTIME ENABLED ‚úÖ' as status
FROM pg_publication_tables 
WHERE pubname = 'supabase_realtime'
ORDER BY tablename;

-- Verificar todas las pol√≠ticas RLS creadas
SELECT 
  tablename,
  policyname,
  cmd,
  permissive,
  CASE 
    WHEN policyname LIKE '%realtime%' THEN '‚úÖ CONFIGURADA PARA REALTIME'
    ELSE '‚ö†Ô∏è  POL√çTICA EXISTENTE'
  END as status
FROM pg_policies 
WHERE tablename IN ('orders', 'order_item', 'order_payments', 'order_tracking')
ORDER BY tablename, policyname;

-- Verificar que RLS est√° habilitado en todas las tablas
SELECT 
  schemaname,
  tablename,
  rowsecurity as rls_enabled
FROM pg_tables 
WHERE tablename IN ('orders', 'order_item', 'order_payments', 'order_tracking')
ORDER BY tablename;

-- =====================================================
-- TESTING Y VALIDACI√ìN
-- =====================================================

-- 1. Test de conexi√≥n b√°sica (ejecutar como usuario normal)
-- SELECT id, order_number, status FROM orders WHERE customer_id = auth.uid();

-- 2. Test de Realtime (usar en navegador con WebSocket)
-- const client = createClient(url, key)
-- const channel = client.channel('test-orders')
--   .on('postgres_changes', { event: '*', schema: 'public', table: 'orders' }, console.log)
--   .subscribe()

-- =====================================================
-- MONITOREO Y TROUBLESHOOTING
-- =====================================================

/*
üìä DASHBOARD SUPABASE - QU√â MONITOREAR:

1. REALTIME CONNECTIONS:
   - Dashboard > Settings > API > Realtime
   - Verificar l√≠mite de conexiones (200 en plan Pro)
   - Monitorear eventos por segundo

2. LOGS DE REALTIME:
   - Dashboard > Logs > Realtime
   - Buscar errores de conexi√≥n
   - Verificar eventos de suscripci√≥n/desuscripci√≥n

3. PERFORMANCE:
   - Dashboard > Reports > Database
   - Monitor Egress usage (objetivo: <50% del l√≠mite)
   - Verificar queries lentas

4. AUTHENTICATION:
   - Dashboard > Authentication > Users
   - Verificar pol√≠ticas RLS funcionando correctamente

üîß COMANDOS DE DEBUGGING:

-- Ver conexiones activas por usuario
SELECT count(*) FROM pg_stat_activity WHERE application_name LIKE '%realtime%';

-- Ver pol√≠ticas activas
SELECT * FROM pg_policies WHERE tablename = 'orders';

-- Test manual de filtros RLS
SET ROLE authenticated;
SET request.jwt.claim.sub = 'user-id-here';
SELECT * FROM orders;  -- Solo deber√≠a mostrar pedidos del usuario

‚ö° OPTIMIZACI√ìN PERFORMANCE:

-- √çndices recomendados para Realtime
CREATE INDEX IF NOT EXISTS idx_orders_customer_id ON orders(customer_id);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_orders_updated_at ON orders(updated_at);

-- √çndices para order_item
CREATE INDEX IF NOT EXISTS idx_order_item_order_id ON order_item(order_id);

-- √çndices para order_payments  
CREATE INDEX IF NOT EXISTS idx_order_payments_order_id ON order_payments(order_id);

üö® SOLUCI√ìN DE PROBLEMAS COMUNES:

1. "No se reciben eventos Realtime"
   - Verificar que RLS est√° configurado correctamente
   - Verificar que el usuario tiene permisos
   - Verificar filtros en el cliente

2. "Demasiadas conexiones"
   - Implementar cleanup de conexiones
   - Usar conexiones bajo demanda
   - Implementar pooling de conexiones

3. "Performance lenta"  
   - Verificar √≠ndices en customer_id
   - Reducir frecuencia de eventos
   - Usar filtros espec√≠ficos

4. "Errores de autenticaci√≥n"
   - Verificar JWT tokens
   - Verificar pol√≠ticas RLS
   - Verificar auth.uid() en policies
*/

-- =====================================================
-- CONFIGURACI√ìN COMPLETADA ‚úÖ
-- =====================================================

/*
üéâ SISTEMA H√çBRIDO REALTIME LISTO:

‚úÖ Realtime habilitado en tablas cr√≠ticas
‚úÖ Pol√≠ticas RLS configuradas para seguridad
‚úÖ Sistema de fallback autom√°tico implementado
‚úÖ Optimizaci√≥n de Egress (90% reducci√≥n proyectada)

üöÄ PR√ìXIMOS PASOS:
1. Ejecutar este SQL completo
2. Probar en desarrollo
3. Monitorear m√©tricas en producci√≥n
4. Ajustar seg√∫n necesidades

üìà RESULTADOS ESPERADOS:
- Egress: 4.7GB ‚Üí ~500MB (90% menos)
- Conexiones: 253/200 ‚Üí Bajo demanda
- UX: Tiempo real con fallback robusto
*/